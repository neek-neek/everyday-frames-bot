import logging
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler, 
    ContextTypes, 
    filters
)
import requests
from config import BOT_TOKEN, CHANNEL_USERNAME, ADMIN_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = [
    [KeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton("üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")]
]
confirm_markup = ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
ALLOWED_TAGS = [
    "#–≥–æ—Ä–æ–¥—Å–∫–∞—è_–≥–µ–æ–º–µ—Ç—Ä–∏—è",
    "#—É–ª–∏—á–Ω–æ–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 
    "#–ø—Ä–∏—Ä–æ–¥–Ω–∞—è_—ç—Å—Ç–µ—Ç–∏–∫–∞",
    "#–∏–Ω—Ç–µ—Ä—å–µ—Ä_–∏_—É—é—Ç",
    "#–Ω–æ—á–Ω–∞—è_–º–∞–≥–∏—è",
    "#–º–æ–Ω–æ—Ö—Ä–æ–º"
]

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember"
        params = {
            'chat_id': CHANNEL_USERNAME,
            'user_id': user_id
        }
        response = requests.get(url, params=params)
        result = response.json()
        
        if result['ok']:
            status = result['result']['status']
            return status in ['member', 'administrator', 'creator']
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id):
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞!**\n\n"
            "üì¢ **–ö–∞–¥—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏. –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞** - —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–±–∏—Ç–µ–ª–µ–π –º–æ–±–∏–ª—å–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
            "üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üì∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ¬´–ö–∞–¥—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏. –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞¬ª!**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
        "üìã **–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç–æ–π:**\n"
        "1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ\n"
        "2. –û—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ 4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞\n"
        "3. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º\n\n"
        "üéØ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**\n"
        "‚Ä¢ –°–Ω—è—Ç–æ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω\n"
        "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Å—Ç–µ—Ç–∏–∫–µ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è\n\n"
        "‚û°Ô∏è **–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ!**"
    )
    
    if update.callback_query:
        await update.callback_query.message.reply_text(welcome_text)
    else:
        await update.message.reply_text(welcome_text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id):
        await show_subscription_required(update)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    user_data[user_id] = {
        'photo_file_id': photo_file.file_id,
        'step': 'phone_model'
    }
    
    await update.message.reply_text(
        "üì± **–ù–∞ –∫–∞–∫—É—é –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–Ω—è—Ç–æ —Ñ–æ—Ç–æ?**\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ iPhone 15 Pro Max\n"
        "‚Ä¢ Samsung Galaxy S23 Ultra\n"  
        "‚Ä¢ Xiaomi Redmi Note 12\n"
        "‚Ä¢ Google Pixel 7\n"
        "‚Ä¢ Huawei P60 Pro\n\n"
        "‚û°Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞:"
    )

async def handle_phone_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_data or user_data[user_id]['step'] != 'phone_model':
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        return
    
    user_data[user_id]['phone_model'] = update.message.text
    user_data[user_id]['step'] = 'location'
    
    await update.message.reply_text(
        "üìç **–ì–¥–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ñ–æ—Ç–æ?**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏ –∫—Ä–∞—Ç–∫–æ:\n"
        "‚Ä¢ ¬´–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫, –∞–ª–ª–µ—è —É —Ñ–æ–Ω—Ç–∞–Ω–∞¬ª\n"
        "‚Ä¢ ¬´–¢–∏—Ö–∏–π –¥–≤–æ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞¬ª\n"
        "‚Ä¢ ¬´–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è —Ä–µ–∫–∏, –≤–µ—á–µ—Ä¬ª"
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    if user_id not in user_data or user_data[user_id]['step'] != 'location':
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")
        return
    
    user_data[user_id]['location'] = update.message.text
    user_data[user_id]['step'] = 'description'
    
    await update.message.reply_text(
        "üìù **–û–ø–∏—à–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:**\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ ¬´–£—Ç—Ä–æ, –ø–µ—Ä–≤—ã–π —Å–Ω–µ–≥, –ø—É—Å—Ç—ã–Ω–Ω—ã–µ —É–ª–∏—Ü—ã¬ª\n"
        "‚Ä¢ ¬´–ö–æ—Ñ–µ–π–Ω—è —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏, —á—É–≤—Å—Ç–≤–æ —É—é—Ç–∞¬ª\n"  
        "‚Ä¢ ¬´–ì—Ä—É—Å—Ç—å –æ—Å–µ–Ω–Ω–µ–≥–æ –¥–Ω—è¬ª"
    )

async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_data or user_data[user_id]['step'] != 'description':
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")
        return
    
    user_data[user_id]['description'] = update.message.text
    user_data[user_id]['step'] = 'tag'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–≥–∞–º–∏
    tag_buttons = [[InlineKeyboardButton(tag, callback_data=f"tag_{tag}")] for tag in ALLOWED_TAGS]
    reply_markup = InlineKeyboardMarkup(tag_buttons)
    
    await update.message.reply_text(
        "üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–≥ –¥–ª—è —Ñ–æ—Ç–æ:**\n\n"
        "‚Ä¢ #–≥–æ—Ä–æ–¥—Å–∫–∞—è_–≥–µ–æ–º–µ—Ç—Ä–∏—è - –ª–∏–Ω–∏–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ #—É–ª–∏—á–Ω–æ–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - —ç–º–æ—Ü–∏–∏, –ª—é–¥–∏, –º–æ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ #–ø—Ä–∏—Ä–æ–¥–Ω–∞—è_—ç—Å—Ç–µ—Ç–∏–∫–∞ - –ø–∞—Ä–∫–∏, –¥–µ—Ä–µ–≤—å—è, –≤–æ–¥–∞, –Ω–µ–±–æ\n"
        "‚Ä¢ #–∏–Ω—Ç–µ—Ä—å–µ—Ä_–∏_—É—é—Ç - –∫–∞—Ñ–µ, –¥–æ–º–∞, –¥–µ—Ç–∞–ª–∏\n"
        "‚Ä¢ #–Ω–æ—á–Ω–∞—è_–º–∞–≥–∏—è - –≤–µ—á–µ—Ä, –æ–≥–Ω–∏, —Å—É–º–µ—Ä–∫–∏\n"
        "‚Ä¢ #–º–æ–Ω–æ—Ö—Ä–æ–º - —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Ñ–æ—Ç–æ",
        reply_markup=reply_markup
    )

async def handle_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if user_id not in user_data:
        await query.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    
    tag = query.data.replace('tag_', '')
    user_data[user_id]['tag'] = tag
    user_data[user_id]['step'] = 'confirmation'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_info = user_data[user_id]
    confirmation_text = (
        "‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–∞:**\n\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_info['phone_model']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {user_info['location']}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {user_info['description']}\n"
        f"üè∑Ô∏è **–¢–µ–≥:** {tag}\n\n"
        "‚ùì **–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é?**"
    )
    
    await query.message.reply_text(
        confirmation_text,
        reply_markup=confirm_markup
    )

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id not in user_data:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    
    if text == "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await send_to_moderation(update, context, user_id)
    elif text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data[user_id]['step'] = 'restart'
        await update.message.reply_text(
            "üîÑ –•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!\n\n"
            "‚û°Ô∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:",
            reply_markup=None
        )

async def send_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_info = user_data[user_id]
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    moderation_text = (
        f"üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{user_id}\n\n"
        f"üë§ **–ê–≤—Ç–æ—Ä:** @{username} (ID: {user_id})\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_info['phone_model']}\n"
        f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {user_info['location']}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {user_info['description']}\n"
        f"üè∑Ô∏è **–¢–µ–≥:** {user_info['tag']}\n"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    await context.bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=user_info['photo_file_id'],
        caption=moderation_text,
        reply_markup=reply_markup
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        "üì® **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!**\n\n"
        "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤. "
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ‚ú®",
        reply_markup=None
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(user_id, None)

async def handle_moderation_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = int(data.split('_')[1])
    
    if data.startswith('approve'):
        # –û–¥–æ–±—Ä–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=user_id,
            text="üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à–µ —Ñ–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ ¬´–ö–∞–¥—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏. –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞¬ª!**\n\n"
                 "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏! ‚ú®\n\n"
                 "–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ? –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ! üì∏"
        )
        await query.edit_message_caption(caption=f"‚úÖ –û–î–û–ë–†–ï–ù–û: {query.message.caption}")
        
    elif data.startswith('reject'):
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=user_id,
            text="üòî **–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.**\n\n"
                 "–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:\n"
                 "‚Ä¢ –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –∫–∞–Ω–∞–ª–∞\n"
                 "‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                 "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª\n\n"
                 "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏"
        )
        await query.edit_message_caption(caption=f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: {query.message.caption}")

async def handle_check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if await check_subscription(user_id):
        await show_main_menu(update, context)
    else:
        await query.message.reply_text(
            "‚ùå **–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
            ]])
        )

async def show_subscription_required(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ùå **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞!**\n\n"
        "üì¢ **–ö–∞–¥—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏. –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞** - —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–±–∏—Ç–µ–ª–µ–π –º–æ–±–∏–ª—å–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
        "üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not await check_subscription(user_id):
        await show_subscription_required(update)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_step = user_data.get(user_id, {}).get('step', 'start')
    
    if current_step == 'phone_model':
        await handle_phone_model(update, context)
    elif current_step == 'location':
        await handle_location(update, context)
    elif current_step == 'description':
        await handle_description(update, context)
    elif current_step == 'confirmation':
        await handle_confirmation(update, context)
    else:
        await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_tag_selection, pattern="^tag_"))
    application.add_handler(CallbackQueryHandler(handle_moderation_action, pattern="^(approve|reject)_"))
    application.add_handler(CallbackQueryHandler(handle_check_subscription, pattern="^check_subscription$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
